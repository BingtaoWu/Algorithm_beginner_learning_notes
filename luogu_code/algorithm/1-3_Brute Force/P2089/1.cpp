#include <bits/c++.h> // 包含所有标准库头文件

using namespace std; // 使用标准命名空间

string tot; // 用于存储结果的字符串
int n, m; // n是输入的美味程度，m是方案数量

// 进行累加的函数
void leijia(int a)
{                   
    int b = 262144; // 模拟四进制的基数
    while (a) // 当a不为0时循环
    {
        tot += a / b + '0'; // 用短除法得出各个位上的数，并转换为字符
        tot += ' ';         // 添加空格分隔各位数
        a %= b; // 更新a为余数
        b /= 4; // 更新b为下一个四进制位的基数
    }
    tot += '\n'; // 添加换行符
    m++; // 方案数量加一
}

// 递归函数，寻找满足条件的方案
void f(int s, int k)
{
    if (s < 1 && k < 262145)
        return; // 美味程度达到了，配料还有剩，返回
    if (s > 0 && k > 262144)
        return; // 配料放完了而美味程度没达到，返回
    if (s == 0 && k > 262144)
    { // 达到要求
        leiji(k); // 调用累加函数
        return; // 返回
    } // 以上三种为递归边界
    f(s - 1, k * 4 + 1); // 递归调用，减少1个单位的美味程度，增加1个单位的配料
    f(s - 2, k * 4 + 2); // 递归调用，减少2个单位的美味程度，增加2个单位的配料
    f(s - 3, k * 4 + 3); // 递归调用，减少3个单位的美味程度，增加3个单位的配料
}

int main()
{ // 主函数
    cin >> n; // 输入美味程度
    f(n, 0); // 调用递归函数，初始配料为0
    cout << m << endl // 输出方案数量
         << tot; // 输出所有方案
    return 0; // 返回0，程序结束
}